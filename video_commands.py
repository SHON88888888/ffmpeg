# file: handlers/video_commands.py | created: 2025-05-03 04:20 (UTC+3)

import logging
from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from pathlib import Path
from ffmpeg_creator import create_video_with_ffmpeg

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
BASE_DIR = Path("/opt/ffmpeg_bot")
UPLOAD_DIR = BASE_DIR / "uploads"
OUTPUT_DIR = BASE_DIR / "output"
MUSIC_FILE = BASE_DIR / "assets" / "default.mp3"

OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

logger = logging.getLogger(__name__)

@router.message(Command("make_video"))
async def make_video_handler(message: Message):
    user_id = message.from_user.id
    user_dir = UPLOAD_DIR / str(user_id)
    output_path = OUTPUT_DIR / f"{user_id}_video.mp4"

    if not user_dir.exists() or not any(user_dir.iterdir()):
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    images = sorted(user_dir.glob("*.jpg")) + sorted(user_dir.glob("*.png"))
    if not images:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ .jpg –∏ .png).")
        return

    try:
        await message.answer("üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        create_video_with_ffmpeg(
            images=images,
            music_path=MUSIC_FILE,
            output_path=output_path
        )
        await message.answer_video(video=FSInputFile(output_path))
        
        logger.info(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥.")
