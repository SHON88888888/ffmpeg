# video_commands.py
import asyncio
import json
import logging
from pathlib import Path
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from ffmpeg_creator import create_video_with_ffmpeg

router = Router()
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
IMAGES_FOLDER = Path("/opt/animation/images")
MUSIC_FOLDER = Path("/opt/animation/music")
OUTPUT_VIDEO = Path("/opt/animation/output/output.mp4")
SETTINGS_FILE = Path("/opt/animation/video_settings.json")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
IMAGES_FOLDER.mkdir(parents=True, exist_ok=True)
MUSIC_FOLDER.mkdir(parents=True, exist_ok=True)
OUTPUT_VIDEO.parent.mkdir(parents=True, exist_ok=True)

@router.message(Command("make_video"))
async def cmd_make_video(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = sorted(
            p for p in IMAGES_FOLDER.iterdir() 
            if p.suffix.lower() in (".jpg", ".jpeg", ".png")
        )
        
        if not images:
            await message.answer("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /upload_images")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º—É–∑—ã–∫–∏
        music_files = list(MUSIC_FOLDER.glob("*.mp3"))
        music_file = music_files[0] if music_files else None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = {
            "frame_duration": 3.0,
            "transition_duration": 1.0,
            "transition_type": "fade",
            "aspect_ratio": "square"
        }
        
        if SETTINGS_FILE.exists():
            with SETTINGS_FILE.open("r", encoding="utf-8") as f:
                settings.update(json.load(f))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        progress_msg = await message.answer(
            "üîÑ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...\n"
            f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"- –ö–∞–¥—Ä–æ–≤: {len(images)}\n"
            f"- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–∞: {settings['frame_duration']} —Å–µ–∫\n"
            f"- –ü–µ—Ä–µ—Ö–æ–¥: {settings['transition_type']} ({settings['transition_duration']} —Å–µ–∫)\n"
            f"- –§–æ—Ä–º–∞—Ç: {settings['aspect_ratio']}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{len(images) * (settings['frame_duration'] + settings['transition_duration'])} —Å–µ–∫"
        )

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
        try:
            await create_video_with_ffmpeg(
                images=images,
                music_path=music_file,
                output_path=OUTPUT_VIDEO,
                frame_duration=settings["frame_duration"],
                transition_type=settings["transition_type"],
                transition_duration=settings["transition_duration"],
                aspect_ratio=settings["aspect_ratio"]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            await message.answer_video(FSInputFile(OUTPUT_VIDEO))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}", exc_info=True)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await progress_msg.delete()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_make_video: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")