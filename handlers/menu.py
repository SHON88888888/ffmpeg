# menu.py

import logging
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from pathlib import Path

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.FileHandler('menu_handler.log', encoding='utf-8')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

router = Router()

class VideoSettingsStates(StatesGroup):
    waiting_for_frame_duration = State()
    waiting_for_transition_duration = State()
    waiting_for_transition_type = State()
    waiting_for_aspect_ratio = State()

SETTINGS_FILE = Path("/opt/animation/video_settings.json")

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "üì• –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /upload_images\n"
        "üé¨ –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª–∏–∫ ‚Äî –∂–º–∏ /make_video\n"
        "‚öôÔ∏è –ê –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞—Å—Ç—Ä–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    )

@router.message(Command("upload_images"))
async def cmd_upload_images(message: Message):
    await message.answer("üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ñ–∞–π–ª–æ–º –∏–ª–∏ –∫–∞–∫ —Ñ–æ—Ç–æ). –û–Ω–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ.")

@router.message(Command("settings_frame_duration"))
async def cmd_frame_duration(message: Message, state: FSMContext):
    await message.answer("üïí –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5):")
    await state.set_state(VideoSettingsStates.waiting_for_frame_duration)

@router.message(VideoSettingsStates.waiting_for_frame_duration)
async def process_frame_duration(message: Message, state: FSMContext):
    try:
        duration = float(message.text.strip())
        if duration <= 0:
            raise ValueError("Duration must be positive")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    settings = {}
    if SETTINGS_FILE.exists():
        with SETTINGS_FILE.open("r", encoding="utf-8") as f:
            settings = json.load(f)
    settings["frame_duration"] = duration

    with SETTINGS_FILE.open("w", encoding="utf-8") as f:
        json.dump(settings, f, indent=4, ensure_ascii=False)

    await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.")
    await state.clear()

@router.message(Command("settings_transition_duration"))
async def cmd_transition_duration(message: Message, state: FSMContext):
    await message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):")
    await state.set_state(VideoSettingsStates.waiting_for_transition_duration)

@router.message(VideoSettingsStates.waiting_for_transition_duration)
async def process_transition_duration(message: Message, state: FSMContext):
    try:
        duration = float(message.text.strip())
        if duration <= 0:
            raise ValueError("Duration must be positive")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    settings = {}
    if SETTINGS_FILE.exists():
        with SETTINGS_FILE.open("r", encoding="utf-8") as f:
            settings = json.load(f)
    settings["transition_duration"] = duration

    with SETTINGS_FILE.open("w", encoding="utf-8") as f:
        json.dump(settings, f, indent=4, ensure_ascii=False)

    await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.")
    await state.clear()

@router.message(Command("settings_transition_type"))
async def cmd_transition_type(message: Message, state: FSMContext):
    text = (
        "üéû –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n"
        "1. fade (–ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ)\n"
        "2. slide (—Å–¥–≤–∏–≥)\n"
        "3. zoom (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ)"
    )
    await message.answer(text)
    await state.set_state(VideoSettingsStates.waiting_for_transition_type)

@router.message(VideoSettingsStates.waiting_for_transition_type)
async def process_transition_type(message: Message, state: FSMContext):
    options = {"1": "fade", "2": "slide", "3": "zoom"}
    choice = message.text.strip()
    if choice not in options:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞: 1, 2 –∏–ª–∏ 3")
        return

    settings = {}
    if SETTINGS_FILE.exists():
        with SETTINGS_FILE.open("r", encoding="utf-8") as f:
            settings = json.load(f)
    settings["transition_type"] = options[choice]

    with SETTINGS_FILE.open("w", encoding="utf-8") as f:
        json.dump(settings, f, indent=4, ensure_ascii=False)

    await message.answer(f"‚úÖ –¢–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {options[choice]}")
    await state.clear()

@router.message(Command("settings_aspect_ratio"))
async def cmd_aspect_ratio(message: Message, state: FSMContext):
    text = (
        "üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n"
        "1. –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π (1:1)\n"
        "2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (16:9)\n"
        "3. –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)"
    )
    await message.answer(text)
    await state.set_state(VideoSettingsStates.waiting_for_aspect_ratio)

@router.message(VideoSettingsStates.waiting_for_aspect_ratio)
async def process_aspect_ratio(message: Message, state: FSMContext):
    options = {"1": "square", "2": "horizontal", "3": "vertical"}
    choice = message.text.strip()
    if choice not in options:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞: 1, 2 –∏–ª–∏ 3")
        return

@router.message(Command("current_settings"))
async def cmd_current_settings(message: Message):
    settings = {
        "frame_duration": 8.0,
        "transition_duration": 1.0,
        "transition_type": "fade",
        "aspect_ratio": "square"
    }
    
    if SETTINGS_FILE.exists():
        with SETTINGS_FILE.open("r", encoding="utf-8") as f:
            settings.update(json.load(f))
    
    text = (
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–∞: {settings['frame_duration']} —Å–µ–∫\n"
        f"üîÅ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞: {settings['transition_duration']} —Å–µ–∫\n"
        f"üéû –¢–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞: {settings['transition_type']}\n"
        f"üìê –§–æ—Ä–º–∞—Ç: {settings['aspect_ratio']}"
    )
    await message.answer(text)

    settings = {}
    if SETTINGS_FILE.exists():
        with SETTINGS_FILE.open("r", encoding="utf-8") as f:
            settings = json.load(f)
    settings["aspect_ratio"] = options[choice]

    with SETTINGS_FILE.open("w", encoding="utf-8") as f:
        json.dump(settings, f, indent=4, ensure_ascii=False)

    await message.answer(f"‚úÖ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {options[choice]}")
    await state.clear()
